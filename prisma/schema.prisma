// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url               = env("SHADOW_DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  first_name String
  last_name  String
  created_at DateTime  @default(now())
  updated_at DateTime?

  User_adrress User_adrress[]

  Order Order[]
}

model User_adrress {
  id         Int       @id @default(autoincrement())
  user_id    Int
  zip_code   String
  address    String
  number     String
  reference  String?
  city       String
  stete      String
  street     String
  created_at DateTime  @default(now())
  updated_at DateTime?

  user User @relation(fields: [user_id], references: [id])
}

model Coffee {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  price       Float
  created_at  DateTime  @default(now())
  updated_at  DateTime?

  Coffee_category Coffee_category[]
  Order_coffee    Order_coffee[]
}

model Coffee_category {
  id          Int       @id @default(autoincrement())
  coffee_id   Int
  category_id Int
  created_at  DateTime  @default(now())
  updated_at  DateTime?

  category Category @relation(references: [id], fields: [category_id])
  Coffee   Coffee?  @relation(fields: [coffee_id], references: [id])
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime?

  coffee_category Coffee_category[]
}

model Order {
  id              Int       @id @default(autoincrement())
  user_id         Int
  total           Float?
  payment_at      DateTime?
  payment_type_id Int?
  created_at      DateTime  @default(now())
  updated_at      DateTime?

  payment      Payment_type?  @relation(fields: [payment_type_id], references: [id])
  User         User           @relation(fields: [user_id], references: [id])
  Order_coffee Order_coffee[]
}

model Payment_type {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime?

  Order Order[]
}

model Order_coffee {
  id         Int       @id @default(autoincrement())
  order_id   Int
  coffee_id  Int
  quantity   Int       @default(1)
  created_at DateTime  @default(now())
  updated_at DateTime?

  coffee Coffee @relation(fields: [coffee_id], references: [id])
  order  Order?  @relation(fields: [order_id], references: [id])
}
